{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardArray.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/RoboApp.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","onHover","event","setState","classes","onLeave","state","onMouseOver","this","onMouseLeave","className","src","alt","height","width","props","name","branch","subject","React","Component","CardArray","Faculty","map","user","i","key","SearchBox","onSearch","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundary","hasError","error","info","RoboApp","searchField","target","value","fetch","then","response","json","filterFaculty","filter","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCoBSC,G,uDAjCd,aAAc,IAAD,8BACZ,gBAMEC,QAAU,SAACC,GACV,EAAKC,SAAS,CACbC,QAAQ,gDATA,EAYVC,QAAU,SAACH,GACV,EAAKC,SAAS,CACbC,QAAQ,2CAZZ,EAAKE,MAAQ,CACNF,QAAU,yCAHL,E,qDAoBb,OACA,kBAAC,WAAD,KACE,yBAAKG,YAAeC,KAAKP,QAASQ,aAAgBD,KAAKH,QAAQK,UAAaF,KAAKF,MAAMF,SACvF,yBAAKO,IAAI,sBAAsBC,IAAI,gBAAgBC,OAAO,MAAMC,MAAM,QACtE,4BAAKN,KAAKO,MAAMC,MAChB,2BAAIR,KAAKO,MAAME,QACf,2BAAIT,KAAKO,MAAMG,e,GA7BEC,IAAMC,YCoBXC,EAnBK,SAAC,GAAc,IAAbC,EAAY,EAAZA,QAOrB,OACA,6BAECA,EAAQC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,KAASM,EAAQG,GAAGT,KAAMC,OAAUK,EAAQG,GAAGR,OAAQC,QAAWI,EAAQG,GAAGP,eCLzFS,EAPI,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACpB,OACK,2BAAQlB,UAAY,+BACpBmB,KAAO,SAASC,YAAc,iBAClCC,SAAYH,KCGCI,EARA,SAACjB,GACf,OACA,yBAAKkB,MAAS,CAACC,UAAU,SAAUC,OAAQ,+BAA+BtB,OAAO,SAC/EE,EAAMqB,WC8BMC,E,kDA9Bf,WAAYtB,GAAO,IAAD,8BACjB,cAAMA,IACDT,MAAQ,CACZgC,UAAS,GAHO,E,8DAOAC,EAAMC,GACnBhC,KAAKL,SAAS,CAACmC,UAAS,M,+BAO3B,OAAG9B,KAAKF,MAAMgC,SACG,qDAEH9B,KAAKO,MAAMqB,a,GApBCjB,IAAMC,WCsDnBqB,G,wDApCX,aAAc,IAAD,8BACZ,gBAMDb,SAAY,SAAC1B,GAEZ,EAAKC,SAAS,CAACuC,YAAYxC,EAAMyC,OAAOC,SAPxC,EAAKtC,MAAQ,CACZgB,QAAU,GACVoB,YAAc,IAJH,E,gEAaO,IAAD,OACnBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAxB,GAAO,OAAI,EAAKnB,SAAS,CAACmB,QAAQA,S,+BAIvH,IAAD,OACF2B,EAAgBzC,KAAKF,MAAMgB,QAAQ4B,QAAO,SAAA5B,GAC9C,OAAOA,EAAQN,KAAKmC,cAAcC,SAAS,EAAK9C,MAAMoC,YAAYS,kBAEpE,OACA,yBAAKzC,UAAY,MACZ,wBAAIA,UAAY,OAAhB,iBACA,kBAAC,EAAD,CAAWkB,SAAYpB,KAAKoB,WAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWN,QAAU2B,W,GArCL9B,IAAMC,YCF3BiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SPoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,a","file":"static/js/main.788d6b27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{Fragment} from 'react';\r\nimport 'tachyons'\r\nclass  Card extends React.Component {\r\n    \r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n         classes : \"grow tc dib pa3 ma2 shadow-5 bg-green\",\r\n\t\t}\r\n\t}\r\n       \r\n    onHover = (event)=>{\r\n     this.setState({\r\n     \tclasses:\"grow tc dib pa3 ma2 shadow-5 bg-mid-gray  \", \r\n     })\r\n    }\r\n    onLeave = (event)=>{\r\n     this.setState({\r\n     \tclasses:\"grow tc dib pa3 ma2 shadow-5 bg-green\", \r\n     })\r\n    }   \r\n   \r\n\r\n   render(){ \r\n\treturn(\r\n\t<Fragment>\t\r\n   <div onMouseOver = {this.onHover} onMouseLeave = {this.onLeave}className = {this.state.classes}>\r\n   <img src=\"/images/profile.png\" alt=\"Faclty Photos\" height=\"142\" width=\"182\" />\r\n   <h4>{this.props.name}</h4>\r\n   <p>{this.props.branch}</p>\r\n   <p>{this.props.subject}</p>\r\n   </div>\r\n   </Fragment>\r\n    );\r\n}\r\n}\r\n\r\nexport default Card;","\timport React from 'react';\r\n    import Card from './Card.js'\r\n    //import {Faculty} from './Faculty.js'\r\n\tconst CardArray  = ({Faculty}) =>{\r\n\r\n\r\n\t/*const FacultyList  = Faculty.map((user,i) =>{\r\n\t\t  return <Card name = {Faculty[i].name} branch = {Faculty[i].branch} subject = {Faculty[i].subject}/>\r\n          \r\n\t})*/\t\r\n\treturn(\r\n\t<div>\t\r\n\t {\r\n\t Faculty.map((user,i) =>{\r\n\t\t  return <Card key = {i} name  = {Faculty[i].name} branch = {Faculty[i].branch} subject = {Faculty[i].subject}/>\r\n\t\t})\r\n           \r\n\r\n    }     \r\n\r\n     </div>\r\n)}\r\nexport default CardArray;\r\n\r\n\t\r\n","import React from 'react';\r\n\r\nconst SearchBox  = ({onSearch}) =>{\r\n\treturn(\r\n      <input  className = 'ba b--lightest-blue bw3 glow' \r\n      type = \"search\" placeholder = \"Search Faculty\"\r\n\t\tonChange = {onSearch} />\r\n\t\t);\r\n}\r\nexport default SearchBox","import React from 'react';\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t<div style = {{overflowY:'scroll', border: '1px solid rgba(8, 8, 8, 0.5)',height:'80vh' }} >\r\n\t {props.children}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\t\r\nconstructor(props){\r\n\tsuper(props);\r\n\tthis.state = {\r\n\t\thasError:false,\r\n\t}\r\n}\r\n\r\ncomponentDidCatch(error,info){\r\n  if(this.setState({hasError:true})){\r\n}\r\n}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n            return <h1>Ooops!Try again later</h1>\r\n        }\r\n        \treturn this.props.children;\r\n       \r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from  'react';\r\nimport CardArray from '../components/CardArray';\r\n//import {Faculty} from './Faculty';\r\nimport 'tachyons';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './RoboApp';\r\nimport '../index.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport '../Header1.css';\r\n\r\nclass RoboApp extends React.Component {\r\n\r\n  //1\r\n\t/*state = {\r\n     Faculty : \"Faculty\",\r\n     searchFie../components/ld : '',\t\t\r\n\t}\r\n*/\r\n  //2\r\n    constructor(){\r\n    \tsuper();\r\n    \tthis.state = {\r\n\t     Faculty : [],\r\n\t     searchField : ''\t\r\n\t    \t}\r\n    }\r\n    onSearch = ((event) =>{\r\n    \t\r\n    \tthis.setState({searchField:event.target.value });\r\n              \r\n    })\t\r\n\r\n    componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(Faculty => this.setState({Faculty:Faculty}));\t\r\n     //this.setState({Faculty:Faculty});\r\n    }\r\n\r\n\trender(){\r\n\tconst filterFaculty = this.state.Faculty.filter(Faculty =>{\r\n   return Faculty.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    })     \r\n\treturn(\r\n\t<div className = 'tc'>\t\r\n      <h1 className = 'f1 '>People Finder</h1>\r\n      <SearchBox onSearch = {this.onSearch} />\r\n      <Scroll>\r\n      <ErrorBoundary>\r\n      <CardArray Faculty ={filterFaculty}/>\r\n      </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n\t\t);\r\n\t\t\r\n}\r\n}\r\nexport default RoboApp","\timport React from 'react';\n\timport ReactDOM from 'react-dom';\n\timport './index.css';\n\timport * as serviceWorker from './serviceWorker';\n\t//import CardArray from './CardArray';\n\t//import {Faculty} from './Faculty'\n\t//import App from './App.js'\n\t//import Text from './Practise';\n\timport RoboApp from './containers/RoboApp.js';\n\tReactDOM.render(\n\t  <React.StrictMode>\n\t    <div>\n\t    <RoboApp/>\n\t    </div>\n\t  </React.StrictMode>,\n\t  document.getElementById('root')\n\t);\n\n\t// If you want your app to work offline and load faster, you can change\n\t// unregister() to register() below. Note this comes with some pitfalls.\n\t// Learn more about service workers: https://bit.ly/CRA-PWA\n\tserviceWorker.unregister();\n"],"sourceRoot":""}